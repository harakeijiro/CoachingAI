/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 front/public/dog_speak_after2.glb -o front/components/Dog.tsx --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName = "metarigAction" | "KeyAction.001" | "エンプティAction";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    立方体005: THREE.SkinnedMesh;
    立方体005_1: THREE.SkinnedMesh;
    立方体005_2: THREE.SkinnedMesh;
    立方体005_3: THREE.SkinnedMesh;
    立方体005_4: THREE.SkinnedMesh;
    立方体005_5: THREE.SkinnedMesh;
    立方体005_6: THREE.SkinnedMesh;
    立方体005_7: THREE.SkinnedMesh;
    Mouse: THREE.SkinnedMesh;
    Mouse_Inside: THREE.SkinnedMesh;
    平面: THREE.Mesh;
    spine: THREE.Bone;
  };
  materials: {
    ["マテリアル.004"]: THREE.MeshStandardMaterial;
    マテリアル_pink: THREE.MeshStandardMaterial;
    マテリアル_head: THREE.MeshStandardMaterial;
    ["マテリアル.001"]: THREE.MeshStandardMaterial;
    ["マテリアル.007"]: THREE.MeshStandardMaterial;
    ["マテリアル.003"]: THREE.MeshStandardMaterial;
    ["マテリアル.002"]: THREE.MeshStandardMaterial;
    Material_body: THREE.MeshStandardMaterial;
    ["マテリアル.013"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

interface ModelProps {
  isTalking?: boolean;
  position?: [number, number, number];
  scale?: number | [number, number, number];
  rotation?: [number, number, number];
}

export function Model({ isTalking, ...props }: ModelProps) {
  const group = React.useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF("/dog_speak_after2.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  useAnimations(animations, group);
  const mouseRef = useRef<THREE.SkinnedMesh>(null!);
  const mouseInsideRef = useRef<THREE.SkinnedMesh>(null!);

  // 口パクアニメーション
  useFrame((state) => {
    if (
      isTalking &&
      mouseRef.current &&
      mouseRef.current.morphTargetInfluences
    ) {
      // sin波を使って0から1の値を滑らかに生成し、口の動きを表現
      const influence = (Math.sin(state.clock.elapsedTime * 10) + 1) / 2;
      mouseRef.current.morphTargetInfluences[0] = influence;

      // 口の内側も同期させる
      if (
        mouseInsideRef.current &&
        mouseInsideRef.current.morphTargetInfluences
      ) {
        mouseInsideRef.current.morphTargetInfluences[0] = influence;
      }
    } else if (mouseRef.current && mouseRef.current.morphTargetInfluences) {
      // 話していない時は口を閉じる
      mouseRef.current.morphTargetInfluences[0] = 0;
      if (
        mouseInsideRef.current &&
        mouseInsideRef.current.morphTargetInfluences
      ) {
        mouseInsideRef.current.morphTargetInfluences[0] = 0;
      }
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig">
          <primitive object={nodes.spine} />
          <group name="Body">
            <skinnedMesh
              name="立方体005"
              geometry={nodes.立方体005.geometry}
              material={materials["マテリアル.004"]}
              skeleton={nodes.立方体005.skeleton}
            />
            <skinnedMesh
              name="立方体005_1"
              geometry={nodes.立方体005_1.geometry}
              material={materials.マテリアル_pink}
              skeleton={nodes.立方体005_1.skeleton}
            />
            <skinnedMesh
              name="立方体005_2"
              geometry={nodes.立方体005_2.geometry}
              material={materials.マテリアル_head}
              skeleton={nodes.立方体005_2.skeleton}
            />
            <skinnedMesh
              name="立方体005_3"
              geometry={nodes.立方体005_3.geometry}
              material={materials["マテリアル.001"]}
              skeleton={nodes.立方体005_3.skeleton}
            />
            <skinnedMesh
              name="立方体005_4"
              geometry={nodes.立方体005_4.geometry}
              material={materials["マテリアル.007"]}
              skeleton={nodes.立方体005_4.skeleton}
            />
            <skinnedMesh
              name="立方体005_5"
              geometry={nodes.立方体005_5.geometry}
              material={materials["マテリアル.003"]}
              skeleton={nodes.立方体005_5.skeleton}
            />
            <skinnedMesh
              name="立方体005_6"
              geometry={nodes.立方体005_6.geometry}
              material={materials["マテリアル.002"]}
              skeleton={nodes.立方体005_6.skeleton}
            />
            <skinnedMesh
              name="立方体005_7"
              geometry={nodes.立方体005_7.geometry}
              material={materials.Material_body}
              skeleton={nodes.立方体005_7.skeleton}
            />
          </group>
          <skinnedMesh
            ref={mouseRef}
            name="Mouse"
            geometry={nodes.Mouse.geometry}
            material={materials.Material_body}
            skeleton={nodes.Mouse.skeleton}
            morphTargetDictionary={nodes.Mouse.morphTargetDictionary}
            morphTargetInfluences={nodes.Mouse.morphTargetInfluences}
          />
          <skinnedMesh
            ref={mouseInsideRef}
            name="Mouse_Inside"
            geometry={nodes.Mouse_Inside.geometry}
            material={materials.マテリアル_pink}
            skeleton={nodes.Mouse_Inside.skeleton}
            morphTargetDictionary={nodes.Mouse_Inside.morphTargetDictionary}
            morphTargetInfluences={nodes.Mouse_Inside.morphTargetInfluences}
          />
        </group>
        <group
          name="エンプティ"
          position={[0, 2.219, 0]}
          rotation={[0, -0.417, 0]}
        />
        <mesh
          name="平面"
          geometry={nodes.平面.geometry}
          material={materials["マテリアル.013"]}
          position={[0, 0, 5.615]}
          scale={11.272}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/dog_speak_after2.glb");
