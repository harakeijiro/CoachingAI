---
description: ディレクトリ構造とファイル配置のルール
globs: ["**/*"]
alwaysApply: true
---

# ディレクトリ構造ルール

## 基本原則

### 1. 機能別分類を優先
- 関連する機能は同じディレクトリに配置
- 例: `auth/`, `chat/`, `user/`

### 2. レイヤー別分類を併用
- `components/` - UIコンポーネント
- `lib/` - ビジネスロジック・ユーティリティ
- `app/` - ページ・API Routes

### 3. 責任別分類で細分化
- `actions/` - Server Actions
- `types/` - 型定義
- `utils/` - ユーティリティ関数
- `hooks/` - カスタムフック

## ディレクトリ命名規則

### 機能ディレクトリ
- **小文字 + ハイフン**: `user-profile/`, `chat-room/`
- **単数形**: `user/` (not `users/`)
- **明確な機能名**: `auth/`, `payment/`, `notification/`

### 技術ディレクトリ
- **技術名**: `supabase/`, `api/`, `components/`
- **用途名**: `migrations/`, `scripts/`, `public/`

## ファイル作成時の確認事項

### 新規ディレクトリ作成前
1. **既存の類似ディレクトリがないか確認**
2. **機能の責任範囲が明確か確認**
3. **命名が一貫しているか確認**
4. **適切な階層レベルか確認**

### ファイル配置前
1. **適切なディレクトリに配置されているか**
2. **命名規則に従っているか**
3. **関連ファイルと近い場所にあるか**

## 禁止事項

- **深すぎる階層**: 3階層以上は避ける
- **曖昧な命名**: `misc/`, `other/`, `temp/`
- **技術と機能の混在**: `auth-components/` (機能と技術が混在)
- **重複する責任**: 同じ機能が複数ディレクトリに分散

## 推奨構造

```
project/
├── app/                    # ページ・API
│   ├── (feature)/         # 機能別ページ
│   └── api/               # API Routes
├── components/            # UIコンポーネント
│   └── (feature)/         # 機能別コンポーネント
├── lib/                   # ビジネスロジック
│   ├── actions/           # Server Actions
│   ├── hooks/             # カスタムフック
│   ├── types/             # 型定義
│   ├── utils/             # ユーティリティ
│   └── (service)/         # 外部サービス連携
└── (external)/            # 外部サービス設定
    └── migrations/         # DBマイグレーション
```

## 現在のプロジェクト構造との整合性

### 既存構造の評価
- ✅ **機能別分類**: `auth/`, `chat/` が適切に分離
- ✅ **レイヤー別分類**: `components/`, `lib/`, `app/` が明確
- ✅ **責任別分類**: `actions/`, `types/`, `utils/` が適切
- ✅ **技術別分類**: `supabase/`, `api/` が明確

### 適用方針
- **既存構造を尊重**: 現在の構造は適切に設計されている
- **新規作成時のみ適用**: 既存ファイルは変更しない
- **段階的改善**: 必要に応じて既存構造を改善

## チェックリスト

### 新規ディレクトリ作成時
- [ ] 既存の類似ディレクトリを確認
- [ ] 機能の責任範囲を明確化
- [ ] 命名規則に従っているか確認
- [ ] 階層レベルが適切か確認（3階層以内）

### 新規ファイル作成時
- [ ] 適切なディレクトリに配置されているか
- [ ] 命名規則に従っているか
- [ ] 関連ファイルと近い場所にあるか
- [ ] 責任範囲が明確か

## 例外事項

### 技術的制約
- **Next.js App Router**: `app/` ディレクトリの構造は Next.js の制約に従う
- **Supabase**: `supabase/` ディレクトリの構造は Supabase の制約に従う
- **設定ファイル**: ルートレベルの設定ファイルは技術的制約に従う

### プロジェクト固有
- **documents/**: 設計書はプロジェクト固有の構造を維持
- **scripts/**: セットアップスクリプトは用途別に配置
- **public/**: 静的ファイルは Next.js の制約に従う