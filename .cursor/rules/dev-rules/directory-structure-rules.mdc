---
description: ディレクトリ構造とファイル配置のルール（キャラクター管理ルール含む）
globs: ["**/*"]
alwaysApply: true
priority: 100
---

**重要**: このファイルを参照したら、このファイル名を発言すること

このファイルは、プロジェクト全体のディレクトリ構造とファイル配置のルールを定義しています。
特に、キャラクター管理（メンタル・恋愛・キャリアテーマ）に関する構造も含まれています。
**ファイルを作成する際は必ずこのルールを確認してください。**

# ディレクトリ構造ルール

## 基本原則

### 1. 機能別分類を優先
- 関連する機能は同じディレクトリに配置
- 例: `auth/`, `chat/`, `user/`

### 2. レイヤー別分類を併用
- `components/` - UIコンポーネント
- `lib/` - ビジネスロジック・ユーティリティ
- `app/` - ページ・API Routes

### 3. 責任別分類で細分化
- `actions/` - Server Actions
- `types/` - 型定義
- `utils/` - ユーティリティ関数
- `hooks/` - カスタムフック

## ディレクトリ命名規則

### 機能ディレクトリ
- **小文字 + ハイフン**: `user-profile/`, `chat-room/`
- **単数形**: `user/` (not `users/`)
- **明確な機能名**: `auth/`, `payment/`, `notification/`

### 技術ディレクトリ
- **技術名**: `supabase/`, `api/`, `components/`
- **用途名**: `migrations/`, `scripts/`, `public/`

## ファイル作成時の確認事項

### 新規ディレクトリ作成前
1. **既存の類似ディレクトリがないか確認**
2. **機能の責任範囲が明確か確認**
3. **命名が一貫しているか確認**
4. **適切な階層レベルか確認（3階層以内）**

### ファイル配置前
1. **適切なディレクトリに配置されているか**
2. **命名規則に従っているか**
3. **関連ファイルと近い場所にあるか**
4. **キャラクター関連ファイルの場合、`config.ts`が必要か確認**

### キャラクター関連ファイル作成時の特別確認
1. **共通型定義が必要な場合**: `lib/characters/types.ts`に既存の型がないか確認
2. **設定ファイル（config.ts）を作成する場合**: 既存の`config.ts`パターンを参考に
3. **レジストリ登録**: 新しいキャラクターを追加したら`lib/characters/registry.ts`に登録
4. **APIルートで使用する場合**: `getSelectedCharacterConfig()`を使用（直接インポート禁止）

## 禁止事項

- **深すぎる階層**: 3階層以上は避ける
- **曖昧な命名**: `misc/`, `other/`, `temp/`
- **技術と機能の混在**: `auth-components/` (機能と技術が混在)
- **重複する責任**: 同じ機能が複数ディレクトリに分散

## 推奨構造

```
project/
├── app/                    # ページ・API
│   ├── (feature)/         # 機能別ページ
│   └── api/               # API Routes
├── components/            # UIコンポーネント
│   └── (feature)/         # 機能別コンポーネント
├── lib/                   # ビジネスロジック
│   ├── actions/           # Server Actions
│   ├── hooks/             # カスタムフック
│   ├── types/             # 型定義
│   ├── utils/             # ユーティリティ
│   └── (service)/         # 外部サービス連携
└── (external)/            # 外部サービス設定
    └── migrations/         # DBマイグレーション
```

## 現在のプロジェクト構造との整合性

### 既存構造の評価
- ✅ **機能別分類**: `auth/`, `chat/` が適切に分離
- ✅ **レイヤー別分類**: `components/`, `lib/`, `app/` が明確
- ✅ **責任別分類**: `actions/`, `types/`, `utils/` が適切
- ✅ **技術別分類**: `supabase/`, `api/` が明確

### 適用方針
- **既存構造を尊重**: 現在の構造は適切に設計されている
- **新規作成時のみ適用**: 既存ファイルは変更しない
- **段階的改善**: 必要に応じて既存構造を改善

## チェックリスト

### 新規ディレクトリ作成時
- [ ] 既存の類似ディレクトリを確認
- [ ] 機能の責任範囲を明確化
- [ ] 命名規則に従っているか確認
- [ ] 階層レベルが適切か確認（3階層以内）

### 新規ファイル作成時
- [ ] 適切なディレクトリに配置されているか
- [ ] 命名規則に従っているか
- [ ] 関連ファイルと近い場所にあるか
- [ ] 責任範囲が明確か

## キャラクター管理ルール

### 基本原則
- **テーマ × キャラクター × 機能** の3次元構造
- **テーマ**: `mental` | `love` | `career`
- **キャラクター**: `dog` | `cat` | `mike` | `kent` など
- **機能**: `model` | `animation` | `voice` | `behavior`

### ディレクトリ構造
```
front/
├── components/characters/
│   ├── shared/                    # 全キャラクター共通
│   │   ├── CharacterCanvas.tsx    # 3D表示の基本設定
│   │   ├── CharacterLighting.tsx  # ライティング設定
│   │   └── CharacterTypes.ts      # 共通型定義（BaseCharacterProps等）
│   ├── mental/                   # メンタルテーマ
│   │   └── dog/                  # 犬キャラクター
│   │       ├── Dog.tsx            # 統合コンポーネント
│   │       ├── DogModel.tsx       # 3Dモデル
│   │       ├── DogAnimations.tsx  # アニメーション
│   │       ├── DogVoice.tsx       # 音声機能
│   │       ├── DogBehavior.tsx    # 行動制御
│   │       ├── DogTypes.ts        # 型定義（Dog固有）
│   │       ├── config.ts          # 設定（性格・3Dモデル・音声等）
│   │       └── index.ts           # エクスポート統合
│   ├── love/                     # 恋愛テーマ
│   │   └── cat/                  # 猫キャラクター（将来）
│   │       ├── Cat.tsx
│   │       ├── CatModel.tsx
│   │       ├── CatAnimations.tsx
│   │       ├── CatVoice.tsx
│   │       ├── CatBehavior.tsx
│   │       ├── CatTypes.ts
│   │       ├── config.ts          # 恋愛テーマ専用の性格設定
│   │       └── index.ts
│   └── career/                   # キャリアテーマ
│       └── owl/                  # フクロウキャラクター（将来）
│           ├── Owl.tsx
│           ├── OwlModel.tsx
│           ├── OwlAnimations.tsx
│           ├── OwlVoice.tsx
│           ├── OwlBehavior.tsx
│           ├── OwlTypes.ts
│           ├── config.ts          # キャリアテーマ専用の性格設定
│           └── index.ts
│
└── lib/characters/               # キャラクター管理ロジック
    ├── types.ts                  # 共通型定義（CharacterPersonaConfig等）
    └── registry.ts               # キャラクターレジストリ・取得関数
```

### 機能別分割ルール

#### 1. Model (3Dモデル)
- **責任**: GLTF読み込み、基本表示、マテリアル設定
- **ファイル**: `{Character}Model.tsx`
- **例**: `DogModel.tsx`, `CatModel.tsx`

#### 2. Animations (アニメーション)
- **責任**: ボディアニメーション、ポーズ制御
- **ファイル**: `{Character}Animations.tsx`
- **例**: `DogAnimations.tsx`, `CatAnimations.tsx`

#### 3. Voice (音声機能)
- **責任**: 口パクアニメーション、音声制御
- **ファイル**: `{Character}Voice.tsx`
- **例**: `DogVoice.tsx`, `CatVoice.tsx`

#### 4. Behavior (行動制御)
- **責任**: キャラクター固有の行動、反応
- **ファイル**: `{Character}Behavior.tsx`
- **例**: `DogBehavior.tsx`, `CatBehavior.tsx`

#### 5. Config (設定)
- **責任**: キャラクターの人格設定、3Dモデルパス、音声ID、性格（personaCore）など
- **ファイル**: `config.ts`
- **配置**: 各キャラクターディレクトリ直下
- **内容**: `CharacterPersonaConfig`型に従った設定オブジェクト
- **例**: `mental/dog/config.ts`, `love/cat/config.ts`
- **重要**: 性格設定（personaCore）は必ずここに配置（LLMプロンプトで使用）

#### 6. Types (型定義)
- **責任**: キャラクター固有の型定義（Props、State、Refs等）
- **ファイル**: `{Character}Types.ts`
- **例**: `DogTypes.ts`, `CatTypes.ts`
- **注意**: 共通型定義は`lib/characters/types.ts`に配置

### 設定管理とレジストリ

#### 共通型定義
- **配置**: `lib/characters/types.ts`
- **内容**: `CharacterPersonaConfig`型（全キャラクター共通）
- **用途**: キャラクター設定の型定義

#### キャラクターレジストリ
- **配置**: `lib/characters/registry.ts`
- **責任**: 
  - キャラクター設定の登録・取得
  - 選択中のキャラクター設定の取得
  - テーマ別キャラクターID一覧の取得
- **主要関数**:
  - `getCharacterConfig(characterId)`: IDから設定を取得
  - `getSelectedCharacterConfig()`: 選択中のキャラクター設定を取得
  - `registerCharacter(config)`: 新しいキャラクターを登録

#### 設定ファイル（config.ts）
- **配置**: 各キャラクターディレクトリ直下（例: `mental/dog/config.ts`）
- **内容**: 
  ```typescript
  export const DogConfig: CharacterPersonaConfig = {
    characterId: "mental-dog",
    theme: "mental",
    name: "みずき",
    personaCore: `性格設定テキスト...`,
    // その他の設定
  };
  ```
- **重要**: 
  - 性格設定（`personaCore`）は必ずここに配置
  - LLMプロンプトで使用されるため、各キャラクターごとに独立

### キャラクターID体系
- **命名規則**: `{theme}-{character}-{variant?}`
- **例**: `mental-dog`, `love-mike`, `career-kent`

### 静的ファイル配置
```
front/public/characters/
├── mental/
│   ├── dog/
│   │   └── dog_speak_after2.glb
│   └── cat/
│       └── cat_model.glb
├── love/
│   ├── mike/
│   │   └── mike_model.glb
│   └── cat/
│       └── love_cat_model.glb
└── career/
    ├── kent/
    │   └── kent_model.glb
    └── owl/
        └── owl_model.glb
```

### キャラクター管理チェックリスト

#### 新規キャラクター追加時
- [ ] テーマ別ディレクトリ（`mental/`, `love/`, `career/`）に配置されているか
- [ ] 機能別にファイルが分割されているか（Model, Animations, Voice, Behavior）
- [ ] `config.ts`に性格設定（`personaCore`）が含まれているか
- [ ] キャラクターIDが命名規則（`{theme}-{character}`）に従っているか
- [ ] `lib/characters/registry.ts`にキャラクターを登録したか
- [ ] 静的ファイル（GLB等）が`public/characters/`の適切な場所に配置されているか
- [ ] 共通機能は`shared/`ディレクトリに配置されているか
- [ ] 共通型定義は`lib/characters/types.ts`を使用しているか

#### 設定ファイル（config.ts）作成時
- [ ] `CharacterPersonaConfig`型を使用しているか
- [ ] `characterId`が正しい命名規則に従っているか
- [ ] `personaCore`（性格設定）が含まれているか
- [ ] `modelPath`が`public/characters/`からの相対パスになっているか
- [ ] `theme`が正しく設定されているか

#### レジストリ使用時
- [ ] APIルートでは`getSelectedCharacterConfig()`を使用しているか
- [ ] 直接`DogConfig`などをインポートしていないか（レジストリ経由を推奨）
- [ ] 新しいキャラクターを追加したら`registry.ts`に登録したか

## 例外事項

### 技術的制約
- **Next.js App Router**: `app/` ディレクトリの構造は Next.js の制約に従う
- **Supabase**: `supabase/` ディレクトリの構造は Supabase の制約に従う
- **設定ファイル**: ルートレベルの設定ファイルは技術的制約に従う

### プロジェクト固有
- **documents/**: 設計書はプロジェクト固有の構造を維持
- **scripts/**: セットアップスクリプトは用途別に配置
- **public/**: 静的ファイルは Next.js の制約に従う