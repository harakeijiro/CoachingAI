---
description: ファイル作成時の確認ルール
globs: ["**/*"]
alwaysApply: true
---

# ファイル作成時確認ルール

## ファイル作成前の必須確認事項

### 1. 既存ファイルの重複チェック
- **同名ファイル**: 同じ名前のファイルが既に存在しないか
- **類似機能**: 同じ機能を持つファイルが既に存在しないか
- **重複実装**: 同じ処理を実装したファイルが既に存在しないか

### 2. 適切なディレクトリ配置の確認
- **機能別配置**: 関連する機能のディレクトリに配置されているか
- **レイヤー別配置**: 適切なレイヤー（components/lib/app）に配置されているか
- **責任別配置**: 適切な責任範囲（actions/types/utils）に配置されているか

### 3. 命名規則の確認
- **ファイル名**: 適切な命名規則に従っているか
- **関数名**: 既存の関数名と重複していないか
- **変数名**: 既存の変数名と重複していないか

## 確認手順

### Step 1: 既存ファイル検索
```bash
# 同名ファイルの検索
find . -name "filename.*" -type f

# 類似機能の検索
grep -r "function_name" . --include="*.ts" --include="*.tsx"
```

### Step 2: ディレクトリ構造確認
- 現在のディレクトリ構造を確認
- 適切な配置場所を特定
- 必要に応じて新しいディレクトリを作成

### Step 3: 命名規則確認
- 既存の命名パターンを確認
- 一貫性のある命名を選択
- 重複を避ける

## 禁止事項

### ファイル作成時の禁止事項
- **重複ファイル**: 既存の同名ファイルの作成
- **重複機能**: 既存の同じ機能を持つファイルの作成
- **不適切な配置**: 機能と関係ないディレクトリへの配置
- **曖昧な命名**: 機能が不明確なファイル名

### ディレクトリ作成時の禁止事項
- **深すぎる階層**: 3階層以上の深いディレクトリ構造
- **曖昧な命名**: `misc/`, `other/`, `temp/` などの曖昧な名前
- **技術と機能の混在**: 技術名と機能名が混在したディレクトリ名

## チェックリスト

### 新規ファイル作成時
- [ ] 既存の同名ファイルがないか確認
- [ ] 既存の類似機能がないか確認
- [ ] 適切なディレクトリに配置されているか確認
- [ ] 命名規則に従っているか確認
- [ ] 既存の関数・変数名と重複していないか確認

### 新規ディレクトリ作成時
- [ ] 既存の類似ディレクトリがないか確認
- [ ] 機能の責任範囲が明確か確認
- [ ] 命名規則に従っているか確認
- [ ] 階層レベルが適切か確認（3階層以内）
- [ ] 技術的制約に従っているか確認

## 例外事項

### 技術的制約による例外
- **Next.js App Router**: `app/` ディレクトリ内のファイル構造
- **Supabase**: `supabase/` ディレクトリ内のファイル構造
- **設定ファイル**: ルートレベルの設定ファイル

### プロジェクト固有の例外
- **documents/**: 設計書のファイル構造
- **scripts/**: セットアップスクリプトのファイル構造
- **public/**: 静的ファイルのファイル構造

## 確認ツール

### 自動確認コマンド
```bash
# 重複ファイル検索
find . -name "*.ts" -o -name "*.tsx" | xargs basename -s .ts -s .tsx | sort | uniq -d

# 重複関数検索
grep -r "export.*function" . --include="*.ts" --include="*.tsx" | cut -d: -f2 | sort | uniq -d

# 重複変数検索
grep -r "export.*const" . --include="*.ts" --include="*.tsx" | cut -d: -f2 | sort | uniq -d
```

### 手動確認項目
- [ ] 既存の類似機能の確認
- [ ] 適切なディレクトリ配置の確認
- [ ] 命名規則の確認
- [ ] 重複の確認

## エラー時の対応

### 重複発見時
1. **既存ファイルの確認**: 既存ファイルの内容を確認
2. **機能の統合**: 既存ファイルに機能を追加するか検討
3. **ファイルの削除**: 不要な重複ファイルを削除
4. **命名の変更**: 必要に応じてファイル名を変更

### 不適切な配置発見時
1. **適切な場所の特定**: 適切な配置場所を特定
2. **ファイルの移動**: ファイルを適切な場所に移動
3. **import文の更新**: 移動に伴うimport文を更新
4. **動作確認**: 移動後の動作を確認

## 継続的改善

### 定期的な確認
- **週次**: 重複ファイルの確認
- **月次**: ディレクトリ構造の見直し
- **四半期**: 命名規則の見直し

### 改善提案
- 重複の削減
- 構造の最適化
- 命名規則の改善
- 自動化の導入